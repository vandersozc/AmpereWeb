package com.vandersoncamp.ampereweb.service;import com.vandersoncamp.ampereweb.model.Aparelho;import com.vandersoncamp.ampereweb.util.GenericDao;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.mockito.Mockito;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertNotNull;import static org.mockito.ArgumentMatchers.any;import static org.mockito.Mockito.when;public class AbstractCrudServiceTest {    private AbstractCrudService<Aparelho> abstractCrudService = new AbstractCrudService<Aparelho>() {        @Override        protected GenericDao<Aparelho> getDao() {            GenericDao mock = Mockito.mock(GenericDao.class);            when(mock.getCount(any(), any())).thenReturn(1L);            when(mock.insert(any())).thenReturn(aparelho("Aparelho teste"));            when(mock.find(any())).thenReturn(aparelho("Aparelho teste"));            when(mock.findAll(any(), any(), any(), any(), any())).thenReturn(aparelhos());            when(mock.findAll(any(), any(), any())).thenReturn(aparelhos());            when(mock.update(any())).thenReturn(aparelho("Aparelho alterado"));            mock.delete(any());            return mock;        }    };    private Aparelho aparelho(String descricao) {        Aparelho aparelho = new Aparelho();        aparelho.setId(1L);        aparelho.setDescricao(descricao);        aparelho.setPotencia(BigDecimal.TEN);        aparelho.setTensao(220);        return aparelho;    }    private List<Aparelho> aparelhos() {        List<Aparelho> lista = new ArrayList<>();        lista.add(aparelho("Aparelho teste"));        return lista;    }    @Test    @DisplayName("Test insert")    public void Test01() {        Aparelho aparelho = abstractCrudService.insert(aparelho("Aparelho teste"));        assertEquals(aparelho.getDescricao(), "Aparelho teste");    }    @Test    @DisplayName("Test findById")    public void Test02() {        assertNotNull(abstractCrudService.findById(1L));    }    @Test    @DisplayName("Test findAll")    public void Test03() {        assertNotNull(abstractCrudService.findAll(0, 0, "", "", ""));    }    @Test    @DisplayName("Test findAllOver")    public void Test04() {        assertNotNull(abstractCrudService.findAllOver("", "", ""));    }    @Test    @DisplayName("Test getCount")    public void Test05() {        Long teste = abstractCrudService.getCount("", "");        assertEquals(teste.longValue(), 1L);    }    @Test    @DisplayName("Test update")    public void Test06() {        Aparelho aparelho = aparelho("Aparelho teste");        aparelho.setDescricao("Aparelho alterado");        aparelho.setTensao(380);        Aparelho novo = abstractCrudService.update(aparelho);        assertEquals(novo.getDescricao(), "Aparelho alterado");    }    @Test    @DisplayName("Test remove")    public void test07() {        abstractCrudService.remove(1L);    }}