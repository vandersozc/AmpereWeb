package com.vandersoncamp.ampereweb.resource;import com.vandersoncamp.ampereweb.model.Carga;import com.vandersoncamp.ampereweb.service.CargaService;import javax.enterprise.context.RequestScoped;import javax.inject.Inject;import javax.ws.rs.*;import javax.ws.rs.core.MediaType;import javax.ws.rs.core.Response;@Path("/cargas")@RequestScopedpublic class CargaResource {    @Inject    private CargaService service;    @GET    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    public Response buscar(@PathParam("id") Long id) {        Carga carga = service.buscar(id);        if (carga == null) {            return Response.status(Response.Status.NOT_FOUND).build();        }        return Response.ok(carga).build();    }    @GET    @Produces(MediaType.APPLICATION_JSON)    public Response pesquisar(            @QueryParam("filterField") String filterField,            @QueryParam("filterValue") String filterValue,            @QueryParam("order") String order) {        return Response.ok(service.pesquisar(filterField, filterValue, order)).build();    }    @POST    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response criar(Carga carga) {        service.criar(carga);        return Response.status(Response.Status.CREATED).entity(carga).build();    }    @PUT    @Path("{id}")    @Produces(MediaType.APPLICATION_JSON)    @Consumes(MediaType.APPLICATION_JSON)    public Response atualizar(Carga carga, @PathParam("id") Long id) {        if (!id.equals(carga.getId())) {            return Response.status(Response.Status.BAD_REQUEST).entity("ID do objeto difere do ID da URL").build();        }        service.atualizar(carga);        return Response.status(Response.Status.OK).entity(carga).build();    }    @DELETE    @Path("{id}")    public Response excluir(@PathParam("id") Long id) {        service.excluir(id);        return Response.status(Response.Status.NO_CONTENT).build();    }}