<<<<<<< HEAD
package com.vandersoncamp.ampereweb.service;import com.vandersoncamp.ampereweb.util.EntityID;import javax.persistence.EntityManager;import javax.persistence.EntityNotFoundException;import javax.persistence.PersistenceContext;import java.util.Arrays;import java.util.List;public abstract class GenericService<T extends EntityID, I> {    private Class<T> entityClass;    @PersistenceContext    private EntityManager em;    protected GenericService() {    }    public GenericService(Class<T> entityClass) {        this.entityClass = entityClass;    }    public T criar(T entity) {        em.persist(entity);        return entity;    }    public T atualizar(T entity) {        T oldBean = em.find(entityClass, entity.getId());        if (oldBean == null) {            throw new EntityNotFoundException();        }        return em.merge(entity);    }    public void excluir(I id) {        T entity = em.getReference(entityClass, id);        em.remove(entity);    }    private boolean nomEmpty(String... values) {        for (String val : values) {            if (val == null || val.trim().isEmpty()) {                return false;            }        }        return true;    }    private List<String> asListString(String value) {        return Arrays.asList(value.split("\\."));    }    public List<T> pesquisar(Integer pageSize, Integer pageNumber, String filterField, String filterData, String order) {        JpaCriteriaHelper helper = JpaCriteriaHelper.select(em, entityClass);        if (pageSize != null && pageNumber != null) {            helper.setPageSize(pageSize).page(pageNumber);        }        if (nomEmpty(filterField, filterData)) {            helper.where(asListString(filterField), JpaCriteriaHelper.ComparatorOperator.LIKE_IGNORE_CASE, filterData.replaceAll("\\b", "%"));        }        if (nomEmpty(order)) {            String[] parts = order.split("\\+");            helper.orderBy(parts[0]);            if (parts.length > 1 && parts[1].equalsIgnoreCase("desc")) {                helper.desc();            }        }        return helper.getResults();    }    public List<T> pesquisar(String filterField, String filterData, String order) {        return pesquisar(null, null, filterField, filterData, order);    }    public T buscar(I id) {        T bean = em.find(entityClass, id);        if (bean == null) {            throw new EntityNotFoundException();        }        return bean;    }}
=======
package com.vandersoncamp.ampereweb.service;import com.vandersoncamp.ampereweb.util.EntityID;import javax.inject.Inject;import javax.persistence.EntityManager;import javax.persistence.EntityNotFoundException;import javax.persistence.PersistenceContext;import java.util.Arrays;import java.util.List;public abstract class GenericService<T extends EntityID, I> {    private Class<T> entityClass;    @PersistenceContext    private EntityManager em;    protected GenericService() {    }    public GenericService(Class<T> entityClass) {        this.entityClass = entityClass;    }    public T criar(T entity) {        em.persist(entity);        return entity;    }    public T atualizar(T entity) {        T oldBean = em.find(entityClass, entity.getId());        if (oldBean == null) {            throw new EntityNotFoundException();        }        return em.merge(entity);    }    public void excluir(I id) {        T entity = em.getReference(entityClass, id);        em.remove(entity);    }    private boolean nomEmpty(String... values) {        for (String val : values) {            if (val == null || val.trim().isEmpty()) {                return false;            }        }        return true;    }    private List<String> asListString(String value) {        return Arrays.asList(value.split("\\."));    }    public List<T> pesquisar(Integer pageSize, Integer pageNumber, String filterField, String filterData, String order) {        JpaCriteriaHelper helper = JpaCriteriaHelper.select(em, entityClass);        if (pageSize != null && pageNumber != null) {            helper.setPageSize(pageSize)                    .page(pageNumber);        }        if (nomEmpty(filterField, filterData)) {            helper.where(asListString(filterField), JpaCriteriaHelper.ComparatorOperator.LIKE_IGNORE_CASE, filterData.replaceAll("\\b", "%"));        }        if (nomEmpty(order)) {            String[] parts = order.split("\\+");            helper.orderBy(parts[0]);            if (parts.length > 1 && parts[1].equalsIgnoreCase("desc")) {                helper.desc();            }        }        return helper.getResults();    }    public List<T> pesquisar(String filterField, String filterData, String order) {        return pesquisar(null, null, filterField, filterData, order);    }    public T buscar(I id) {        T bean = em.find(entityClass, id);        if (bean == null) {            throw new EntityNotFoundException();        }        return bean;    }}
>>>>>>> cbaa76bc79c17be56987a753058da61eebd31def
